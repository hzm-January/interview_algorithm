def restoreIpAddresses(s: str) -> list[str]:
    """"
        回溯  - 无剪枝
    """
    if len(s) > 12: return []
    path, ans = [], []

    def valid(subs):
        if len(subs) > 1 and subs[0] == '0': return False  # 前导0
        if int(subs) > 255: return False  # 数值不合法
        return True

    def backtrack(cur):  # 1 参数列表 返回值
        if ''.join(path) == s and len(path) == 4:  # 2 终止条件
            ans.append('.'.join(path))
            return
        for i in range(cur, len(s)):
            if not valid(s[cur:i + 1]):  # 验证 切割子串 是否可以作为IP地址
                continue
            path.append(s[cur:i + 1])
            backtrack(i + 1)
            path.pop()

    backtrack(0)
    return ans


def restoreIpAddresses2(s: str) -> list[str]:
    """"
        回溯
    """
    if len(s) > 12: return []
    path, ans = [], []

    def valid(subs):
        if len(subs) > 1 and subs[0] == '0': return False  # 前导0
        if int(subs) > 255: return False  # 数值不合法
        return True

    def backtrack(cur):  # 1 参数列表 返回值
        if cur >= len(s):  # 2 终止条件
            if ''.join(path) == s and len(path) == 4:
                ans.append('.'.join(path))
            return # 当前切割起点已经到达数组结尾下一个游标，如果path的长度小于4，不满足条件，终止
        for i in range(cur, min(cur + 4, len(s))):
            if not valid(s[cur:i + 1]):  # 验证 切割子串 是否可以作为IP地址
                return # 如果 0|1111|11，因为1111不符合要求，则后面没必要切割了，再切割是0|11111|1，一定不符合要求
            path.append(s[cur:i + 1])
            backtrack(i + 1)
            path.pop()

    backtrack(0)
    return ans


if __name__ == '__main__':
    # s = '25525511135'
    # s = '0000'
    # s = '1111'
    # s = "010010"
    # s = "10203040"
    s = ("11111111111111111111111111111111111111111111111111111111"
         "11111111111111111111111111111111111111111111111111111111111"
         "111111111111111111111111111111111111111111111111111111111111111"
         "1111111111111111111111111111111111111111111111111111111111111111"
         "11111111111111111111111111111111111111111111111111111111111111111"
         "11111111111111111111111111111111111111111111111111111111111111111111"
         "11111111111111111111111111111111111111111111111111111111111111111111"
         "1111111111111111111111111111111111111111111111111111111111111111111111"
         "111111111111111111111111111111111111111111111111111111111111111111111111"
         "111111111111111111111111111111111111111111111111111111111111111111111111"
         "11111111111111111111111111111111111111111111111111111111111111111111111111"
         "1111111111111111111111111111111111111111111111111111111111111111111111111111"
         "11111111111111111111111111111111111111111111111111111111111111111111111111"
         "11111111111111111111111111111111"
         "11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111")
    # ans = restoreIpAddresses(s)
    ans = restoreIpAddresses2(s)
    print(ans)
